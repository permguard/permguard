# Copyright 2024 Nitro Agility S.r.l.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

version: '3'

tasks:
  # Local environment setup

  sourc:deps:install:
    desc: Install/update source dependencies
    cmds:
      - go get -u golang.org/x/crypto
      - go get -u golang.org/x/net
      - go get -u github.com/davecgh/go-spew
      - go get -u github.com/xeipuuv/gojsonschema
      - go get -u go.uber.org/zap
      - go get -u github.com/go-playground/validator/v10
      - go get -u google.golang.org/grpc
      - go get -u github.com/spf13/cobra
      - go get -u github.com/spf13/viper
      - go get -u github.com/stretchr/testify
      - go get -u github.com/fatih/color
      - go get -u get gopkg.in/yaml.v2
      - go get -u github.com/DATA-DOG/go-sqlmock
      - go get -u github.com/pressly/goose/v3
      - go get -u gorm.io/gorm
      - go get -u gorm.io/driver/sqlite
      - go get -u modernc.org/sqlite
      - go get -u moul.io/zapgorm2
      - go get -u github.com/pelletier/go-toml
      - go get -u github.com/gofrs/flock
      - go get -u github.com/permguard/permguard/common
      - go get -u github.com/permguard/permguard/ztauthstar
      - go get -u github.com/cedar-policy/cedar-go

  local:clean:
    desc: Clean local environment
    cmds:
      - rm -rf dist/
      - rm -rf tmp/
      - rm -f coverage.out
      - rm -f result.json

  local:mod:
    desc: Initialize and tidy Go modules
    cmds:
      - go mod download
      - go mod tidy

  local:tools:macos:
    desc: Install local development tools
    platforms: [darwin]
    cmds:
      - brew install protobuf
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
      - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      - go install github.com/google/addlicense@latest
      - brew update
      - brew install cosign
      - brew install gpg
      - brew install syft
      - brew install golangci-lint
      - brew install staticcheck
      - brew install gofumpt

  local:up:
    desc: Start local environment
    cmds:
      - go run ./cmd/provisioner-db-sqlite/main.go --up --dbdir ./samples/volume --debug

  local:down:
    desc: Stop local environment
    cmds:
      - go run ./cmd/provisioner-db-sqlite/main.go --down  --dbdir ./samples/volume --debug

  local:docker:
    desc: Start local environment using Docker
    cmds:
      - docker build -t permguard-all-in-one:latest -f ./cmd/server-all-in-one/Dockerfile .
      - docker run --rm -it -v ./samples/volume:/opt/permguard/volume -p 9092:9092 -p 9091:9091 -p 9094:9094 -e PERMGUARD_DEBUG="TRUE" permguard-all-in-one:latest

  local:
    desc: Setup the local environment
    cmds:
      - task: local:tools:macos
      - task: local:mod
      - task: local:up

  # Source code quality
  source:fmt:
    desc: Format the source code.
    cmds:
      - gofumpt -w -l .

  source:lint:
    desc: Lint the source code.
    cmds:
      - go vet ./...
      - gofmt -s -w **/**.go
      - golangci-lint run --config ./.golangci.yaml ./... --enable staticcheck

  source:codegen:license:add:
    desc: Add license to .go, .sh, .yml, .yaml, and Makefile files
    cmds:
      - |
        find . -type f \( -name '*.go' -o -name '*.sh' -o -iname 'makefile' -o -name '*.yml' -o -name '*.yaml' \) \
          ! -path '*/vendor/*' ! -path '*/.git/*' ! -path '*/node_modules/*' \
          -exec addlicense -c "Nitro Agility S.r.l." {} +

  source:codegen:license:dry:
    desc: Preview files that would receive the license header
    cmds:
      - |
        find . -type f \( -name '*.go' -o -name '*.sh' -o -iname 'makefile' -o -name '*.yml' -o -name '*.yaml' \) \
          ! -path '*/vendor/*' ! -path '*/.git/*' ! -path '*/node_modules/*' -print

  source:codegen:proto:
    desc: Generate gRPC code from protobuf definitions
    cmds:
      - protoc internal/agents/services/zap/endpoints/api/v1/*.proto --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative --proto_path=.
      - protoc internal/agents/services/pap/endpoints/api/v1/*.proto --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative --proto_path=.
      - protoc internal/agents/services/pdp/endpoints/api/v1/*.proto --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative --proto_path=.

  # Tests

  test:unit:
    desc: Run unit tests
    cmds:
      - go test ./...

  test:e2e:
    desc: Run end-to-end tests
    cmds:
      - export E2E="TRUE" && GOFLAGS="-count=1" go test ./e2e/...

  test:coverage:
    desc: Run tests with coverage
    cmds:
      - go test -coverprofile=coverage.out ./...
      - go tool cover -func=coverage.out
      - go tool cover -html=coverage.out
      - rm coverage.out

  test:coverage-plugin:
    desc: Run plugin tests with coverage
    cmds:
    - go test -coverprofile=coverage.out ./plugin/...
    - go tool cover -func=coverage.out
    - go tool cover -html=coverage.out
    - rm coverage.out

  test:converage-%:
    desc: Run tests with coverage for a specific package
    cmds:
      - go test -coverprofile=coverage.out ./...

  test:converage-json:
    desc: Run tests with coverage and output in JSON format
    cmds:
        - go test -json -coverprofile=coverage.out ./... > result.json

  # Documentation

  docs:
    desc: Start documentation server
    cmds:
      - cd www && npm i && npm run dev

  # Git Flow

  push-docs:
    desc: Git push for documentation
    cmd: 'git add -A && git commit -m "docs: {{.CLI_ARGS}}" && git push || echo DONE'

  push-style:
    desc: Git push for formatting, missing semi colons, etc; no code change
    cmd: 'git add -A && git commit -m "style: {{.CLI_ARGS}}" && git push || echo DONE'

  push-refactor:
    desc: Git push for refactoring production code
    cmd: 'git add -A && git commit -m "refactor: {{.CLI_ARGS}}" && git push || echo DONE'

  push-fix:
    desc: Git push for bug fix
    cmd: 'git add -A && git commit -m "fix: {{.CLI_ARGS}}" && git push || echo DONE'

  push-feat:
    desc: Git push for new feature
    cmd: 'git add -A && git commit -m "feat: {{.CLI_ARGS}}" && git push || echo DONE'

  push-breaking:
    desc: Git push for code change that breaks existing functionality
    cmd: 'git add -A && git commit -m "breaking: {{.CLI_ARGS}}" && git push || echo DONE'

  push-test:
    desc: Git push for adding tests, refactoring test; no production code change
    cmd: 'git add -A && git commit -m "test: {{.CLI_ARGS}}" && git push || echo DONE'

  push-build:
    desc: Git push for code change that affects the build system or external dependencies
    cmd: 'git add -A && git commit -m "build: {{.CLI_ARGS}}" && git push || echo DONE'

  push-chore:
    desc: Git push for updating build tasks, package manager configs, etc; no production code change
    cmd: 'git add -A && git commit -m "chore: {{.CLI_ARGS}}" && git push || echo DONE'

  push-perf:
    desc: Git push for code change that improves performance
    cmd: 'git add -A && git commit -m "perf: {{.CLI_ARGS}}" && git push || echo DONE'

  push-security:
    desc: Git push for code change that improves security
    cmd: 'git add -A && git commit -m "security: {{.CLI_ARGS}}" && git push || echo DONE'

  push-ci:
    desc: Git push for updating CI build tasks, etc; no production code change
    cmd: 'git add -A && git commit -m "ci: {{.CLI_ARGS}}" && git push || echo DONE'

  push-release:
    desc: Git push for code change for release
    cmd: 'git add -A && git commit -m "release: {{.CLI_ARGS}}" && git push || echo DONE'

  # Servers

  cli:
    desc: Start CLI server
    cmds:
      - go run cmd/cli/main.go {{.CLI_ARGS}}
    silent: false

  server-allinone:
    desc: Start all-in-one server
    cmds:
      - go run cmd/server-all-in-one/main.go {{.CLI_ARGS}}
    silent: false

  server-zap:
    desc: Start Zap server
    cmds:
      - go run cmd/server-zap/main.go {{.CLI_ARGS}}
    silent: false

  server-pap:
    desc: Start PAP server
    cmds:
      - go run cmd/server-pap/main.go {{.CLI_ARGS}}
    silent: false

  server-pip:
    desc: Start PIP server
    cmds:
      - go run cmd/server-pip/main.go {{.CLI_ARGS}}
    silent: false

  server-pdp:
    desc: Start PDP server
    cmds:
      - go run cmd/server-pdp/main.go {{.CLI_ARGS}}
    silent: false
