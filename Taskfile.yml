# Copyright 2024 Nitro Agility S.r.l.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

version: '3'

tasks:
  # Code and Docs
  license:
    cmd: addlicense  -c "Nitro Agility S.r.l." -s .
  fmt:
    cmds:
      - find . -name "*.go" -exec go fmt {} \;
  proto:
    cmds:
      - make protoc
  docs:
    cmds:
      - cd www && npm i && npm run dev
  # Git Flow
  push-docs:
    desc: git push for documentation
    cmd: 'git add -A && git commit -m "docs: {{.CLI_ARGS}}" && git push || echo DONE'
  push-style:
    desc: git push for formatting, missing semi colons, etc; no code change
    cmd: 'git add -A && git commit -m "style: {{.CLI_ARGS}}" && git push || echo DONE'
  push-refactor:
    desc: git push for refactoring production code
    cmd: 'git add -A && git commit -m "refactor: {{.CLI_ARGS}}" && git push || echo DONE'
  push-fix:
    desc: git push for bug fix
    cmd: 'git add -A && git commit -m "fix: {{.CLI_ARGS}}" && git push || echo DONE'
  push-feat:
    desc: git push for new feature
    cmd: 'git add -A && git commit -m "feat: {{.CLI_ARGS}}" && git push || echo DONE'
  push-breaking:
    desc: git push for code change that breaks existing functionality
    cmd: 'git add -A && git commit -m "breaking: {{.CLI_ARGS}}" && git push || echo DONE'
  push-test:
    desc: git push for adding tests, refactoring test; no production code change
    cmd: 'git add -A && git commit -m "test: {{.CLI_ARGS}}" && git push || echo DONE'
  push-build:
    desc: git push for code change that affects the build system or external dependencies
    cmd: 'git add -A && git commit -m "build: {{.CLI_ARGS}}" && git push || echo DONE'
  push-chore:
    desc: git push for updating build tasks, package manager configs, etc; no production code change
    cmd: 'git add -A && git commit -m "chore: {{.CLI_ARGS}}" && git push || echo DONE'
  push-perf:
    desc: git push for code change that improves performance
    cmd: 'git add -A && git commit -m "perf: {{.CLI_ARGS}}" && git push || echo DONE'
  push-security:
    desc: git push for code change that improves security
    cmd: 'git add -A && git commit -m "security: {{.CLI_ARGS}}" && git push || echo DONE'
  push-ci:
    desc: git push for updating CI build tasks, etc; no production code change
    cmd: 'git add -A && git commit -m "ci: {{.CLI_ARGS}}" && git push || echo DONE'
  push-release:
    desc: git push for code change for release
    cmd: 'git add -A && git commit -m "release: {{.CLI_ARGS}}" && git push || echo DONE'
  # Build and Run
  build:
    cmds:
      - make build
    silent: false
  hot:
    cmds:
      - air --build.cmd "go build -o dist/host ./cmd/server-all-in-one/main.go" --build.bin "./dist/host"
  test:
    cmds:
      - make coverage
    silent: true
  e2e:
    cmds:
      - make teste2e
    silent: true
  # Local
  install: export VERSION=$(git describe --tags --match 'v*' --abbrev=0 | cut -c2-) && export BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S') && export GIT_COMMIT=$(git rev-parse --short HEAD) && make build-cli && cp ./dist/permguard ~/.apps/bin/permguard
  docker:
    - docker build -t permguard-all-in-one:latest -f ./cmd/server-all-in-one/Dockerfile .
    - docker run --rm -it -v ./samples/volume:/opt/permguard/volume -p 9092:9092 -p 9091:9091 -p 9094:9094 -e PERMGUARD_DEBUG="TRUE" permguard-all-in-one:latest
  # Up and Down tasks
  up:
    cmds:
      - go run ./cmd/provisioner-db-sqlite/main.go --up --dbdir ./samples/volume --debug
  down:
    cmds:
      - go run ./cmd/provisioner-db-sqlite/main.go --down  --dbdir ./samples/volume --debug
  # Servers
  cli:
    cmds:
      - go run cmd/cli/main.go {{.CLI_ARGS}}
    silent: false
  server-allinone:
    cmds:
      - go run cmd/server-all-in-one/main.go {{.CLI_ARGS}}
    silent: false
  server-zap:
    cmds:
      - go run cmd/server-zap/main.go {{.CLI_ARGS}}
    silent: false
  server-pap:
    cmds:
      - go run cmd/server-pap/main.go {{.CLI_ARGS}}
    silent: false
  server-pip:
    cmds:
      - go run cmd/server-pip/main.go {{.CLI_ARGS}}
    silent: false
  server-pdp:
    cmds:
      - go run cmd/server-pdp/main.go {{.CLI_ARGS}}
    silent: false
  goreleaser:test:pkg:
    desc: Test a package
    cmds:
      - docker run --platform linux/{{.Platform}} --rm --workdir /tmp -v $PWD/dist:/tmp {{.Image}} sh -c '{{.Cmd}} && goreleaser --version'
  oreleaser:test:apk:
    desc: Tests apk packages
    vars:
      apk: "apk add --allow-untrusted -U"
    cmds:
      - task: goreleaser:test:pkg
        vars:
          Platform: "386"
          Image: alpine
          Cmd: "{{.apk}} goreleaser*_x86.apk"
      - task: goreleaser:test:pkg
        vars:
          Platform: "amd64"
          Image: alpine
          Cmd: "{{.apk}} goreleaser*_x86_64.apk"
      - task: goreleaser:test:pkg
        vars:
          Platform: "arm64"
          Image: alpine
          Cmd: "{{.apk}} goreleaser*_aarch64.apk"
      - task: goreleaser:test:pkg
        vars:
          Platform: "arm/7"
          Image: alpine
          Cmd: "{{.apk}} goreleaser*_armv7.apk"
  build-windows-amd64:
    platforms: [windows/amd64, darwin]
    cmds:
      - echo 'Running command on Windows (amd64)'
    preconditions:
      - test -f .env
      - sh: '[ 1 = 0 ]'
        msg: "One doesn't equal Zero, Halting"
