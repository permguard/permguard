// Copyright 2024 Nitro Agility S.r.l.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0


syntax = "proto3";

import "google/protobuf/timestamp.proto";

package zoneadministrationpoint;

option go_package = "github.com/permguard/permguard/internal/hosts/api/zap/v1";

// Zones

// Zone get request.
message ZoneFetchRequest {
  optional int32 Page = 1;
  optional int32 PageSize = 2;
  optional int64 ZoneID = 3;
  optional string Name = 4;
}

// Zone create request.
message ZoneCreateRequest {
  string Name = 1;
}

// Zone update request.
message ZoneUpdateRequest {
  int64 ZoneID = 1;
  string Name = 2;
}

// Zone delete request.
message ZoneDeleteRequest {
  int64 ZoneID = 1;
}

// Zone response.
message ZoneResponse {
  int64 ZoneID = 1;
  google.protobuf.Timestamp CreatedAt = 2;
  google.protobuf.Timestamp UpdatedAt = 3;
  string Name = 4;
}

// V1ZAPService is the service for the Zone Administration Point.
service V1ZAPService {
  // Create a zone.
  rpc CreateZone(ZoneCreateRequest) returns (ZoneResponse) {}
  // Update a zone.
  rpc UpdateZone(ZoneUpdateRequest) returns (ZoneResponse) {}
  // Delete a zone.
  rpc DeleteZone(ZoneDeleteRequest) returns (ZoneResponse) {}
  // Fetch Zones.
  rpc FetchZones(ZoneFetchRequest) returns (stream ZoneResponse) {}
}
