// Copyright 2024 Nitro Agility S.r.l.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: internal/agents/services/zap/endpoints/api/v1/zap.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	V1ZAPService_CreateZone_FullMethodName = "/zoneadministrationpoint.V1ZAPService/CreateZone"
	V1ZAPService_UpdateZone_FullMethodName = "/zoneadministrationpoint.V1ZAPService/UpdateZone"
	V1ZAPService_DeleteZone_FullMethodName = "/zoneadministrationpoint.V1ZAPService/DeleteZone"
	V1ZAPService_FetchZones_FullMethodName = "/zoneadministrationpoint.V1ZAPService/FetchZones"
)

// V1ZAPServiceClient is the client API for V1ZAPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// V1ZAPService is the service for the Zone Administration Point.
type V1ZAPServiceClient interface {
	// Create a zone.
	CreateZone(ctx context.Context, in *ZoneCreateRequest, opts ...grpc.CallOption) (*ZoneResponse, error)
	// Update a zone.
	UpdateZone(ctx context.Context, in *ZoneUpdateRequest, opts ...grpc.CallOption) (*ZoneResponse, error)
	// Delete a zone.
	DeleteZone(ctx context.Context, in *ZoneDeleteRequest, opts ...grpc.CallOption) (*ZoneResponse, error)
	// Fetch Zones.
	FetchZones(ctx context.Context, in *ZoneFetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ZoneResponse], error)
}

type v1ZAPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewV1ZAPServiceClient(cc grpc.ClientConnInterface) V1ZAPServiceClient {
	return &v1ZAPServiceClient{cc}
}

func (c *v1ZAPServiceClient) CreateZone(ctx context.Context, in *ZoneCreateRequest, opts ...grpc.CallOption) (*ZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ZoneResponse)
	err := c.cc.Invoke(ctx, V1ZAPService_CreateZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ZAPServiceClient) UpdateZone(ctx context.Context, in *ZoneUpdateRequest, opts ...grpc.CallOption) (*ZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ZoneResponse)
	err := c.cc.Invoke(ctx, V1ZAPService_UpdateZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ZAPServiceClient) DeleteZone(ctx context.Context, in *ZoneDeleteRequest, opts ...grpc.CallOption) (*ZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ZoneResponse)
	err := c.cc.Invoke(ctx, V1ZAPService_DeleteZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ZAPServiceClient) FetchZones(ctx context.Context, in *ZoneFetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ZoneResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V1ZAPService_ServiceDesc.Streams[0], V1ZAPService_FetchZones_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ZoneFetchRequest, ZoneResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1ZAPService_FetchZonesClient = grpc.ServerStreamingClient[ZoneResponse]

// V1ZAPServiceServer is the server API for V1ZAPService service.
// All implementations must embed UnimplementedV1ZAPServiceServer
// for forward compatibility.
//
// V1ZAPService is the service for the Zone Administration Point.
type V1ZAPServiceServer interface {
	// Create a zone.
	CreateZone(context.Context, *ZoneCreateRequest) (*ZoneResponse, error)
	// Update a zone.
	UpdateZone(context.Context, *ZoneUpdateRequest) (*ZoneResponse, error)
	// Delete a zone.
	DeleteZone(context.Context, *ZoneDeleteRequest) (*ZoneResponse, error)
	// Fetch Zones.
	FetchZones(*ZoneFetchRequest, grpc.ServerStreamingServer[ZoneResponse]) error
	mustEmbedUnimplementedV1ZAPServiceServer()
}

// UnimplementedV1ZAPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedV1ZAPServiceServer struct{}

func (UnimplementedV1ZAPServiceServer) CreateZone(context.Context, *ZoneCreateRequest) (*ZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZone not implemented")
}
func (UnimplementedV1ZAPServiceServer) UpdateZone(context.Context, *ZoneUpdateRequest) (*ZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZone not implemented")
}
func (UnimplementedV1ZAPServiceServer) DeleteZone(context.Context, *ZoneDeleteRequest) (*ZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZone not implemented")
}
func (UnimplementedV1ZAPServiceServer) FetchZones(*ZoneFetchRequest, grpc.ServerStreamingServer[ZoneResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FetchZones not implemented")
}
func (UnimplementedV1ZAPServiceServer) mustEmbedUnimplementedV1ZAPServiceServer() {}
func (UnimplementedV1ZAPServiceServer) testEmbeddedByValue()                      {}

// UnsafeV1ZAPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1ZAPServiceServer will
// result in compilation errors.
type UnsafeV1ZAPServiceServer interface {
	mustEmbedUnimplementedV1ZAPServiceServer()
}

func RegisterV1ZAPServiceServer(s grpc.ServiceRegistrar, srv V1ZAPServiceServer) {
	// If the following call pancis, it indicates UnimplementedV1ZAPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&V1ZAPService_ServiceDesc, srv)
}

func _V1ZAPService_CreateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ZAPServiceServer).CreateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ZAPService_CreateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ZAPServiceServer).CreateZone(ctx, req.(*ZoneCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1ZAPService_UpdateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ZAPServiceServer).UpdateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ZAPService_UpdateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ZAPServiceServer).UpdateZone(ctx, req.(*ZoneUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1ZAPService_DeleteZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ZAPServiceServer).DeleteZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ZAPService_DeleteZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ZAPServiceServer).DeleteZone(ctx, req.(*ZoneDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1ZAPService_FetchZones_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ZoneFetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1ZAPServiceServer).FetchZones(m, &grpc.GenericServerStream[ZoneFetchRequest, ZoneResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1ZAPService_FetchZonesServer = grpc.ServerStreamingServer[ZoneResponse]

// V1ZAPService_ServiceDesc is the grpc.ServiceDesc for V1ZAPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1ZAPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zoneadministrationpoint.V1ZAPService",
	HandlerType: (*V1ZAPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateZone",
			Handler:    _V1ZAPService_CreateZone_Handler,
		},
		{
			MethodName: "UpdateZone",
			Handler:    _V1ZAPService_UpdateZone_Handler,
		},
		{
			MethodName: "DeleteZone",
			Handler:    _V1ZAPService_DeleteZone_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchZones",
			Handler:       _V1ZAPService_FetchZones_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/agents/services/zap/endpoints/api/v1/zap.proto",
}
