// Copyright 2024 Nitro Agility S.r.l.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: internal/agents/services/pap/endpoints/api/v1/pap.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	V1PAPService_CreateLedger_FullMethodName  = "/policyadministrationpoint.V1PAPService/CreateLedger"
	V1PAPService_UpdateLedger_FullMethodName  = "/policyadministrationpoint.V1PAPService/UpdateLedger"
	V1PAPService_DeleteLedger_FullMethodName  = "/policyadministrationpoint.V1PAPService/DeleteLedger"
	V1PAPService_FetchLedgers_FullMethodName = "/policyadministrationpoint.V1PAPService/FetchLedgers"
	V1PAPService_ReceivePack_FullMethodName       = "/policyadministrationpoint.V1PAPService/ReceivePack"
	V1PAPService_NOTPStream_FullMethodName        = "/policyadministrationpoint.V1PAPService/NOTPStream"
)

// V1PAPServiceClient is the client API for V1PAPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// V1PAPService is the service for the Policy Administration Point.
type V1PAPServiceClient interface {
	// Create an ledger.
	CreateLedger(ctx context.Context, in *LedgerCreateRequest, opts ...grpc.CallOption) (*LedgerResponse, error)
	// Update an ledger.
	UpdateLedger(ctx context.Context, in *LedgerUpdateRequest, opts ...grpc.CallOption) (*LedgerResponse, error)
	// Delete an ledger.
	DeleteLedger(ctx context.Context, in *LedgerDeleteRequest, opts ...grpc.CallOption) (*LedgerResponse, error)
	// Fetch ledgers.
	FetchLedgers(ctx context.Context, in *LedgerFetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LedgerResponse], error)
	// ReceivePack receives objects from the client.
	ReceivePack(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PackMessage, PackMessage], error)
	// NOTPStream handles bidirectional stream using the NOTP protocol.
	NOTPStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PackMessage, PackMessage], error)
}

type v1PAPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewV1PAPServiceClient(cc grpc.ClientConnInterface) V1PAPServiceClient {
	return &v1PAPServiceClient{cc}
}

func (c *v1PAPServiceClient) CreateLedger(ctx context.Context, in *LedgerCreateRequest, opts ...grpc.CallOption) (*LedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerResponse)
	err := c.cc.Invoke(ctx, V1PAPService_CreateLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PAPServiceClient) UpdateLedger(ctx context.Context, in *LedgerUpdateRequest, opts ...grpc.CallOption) (*LedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerResponse)
	err := c.cc.Invoke(ctx, V1PAPService_UpdateLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PAPServiceClient) DeleteLedger(ctx context.Context, in *LedgerDeleteRequest, opts ...grpc.CallOption) (*LedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerResponse)
	err := c.cc.Invoke(ctx, V1PAPService_DeleteLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PAPServiceClient) FetchLedgers(ctx context.Context, in *LedgerFetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LedgerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V1PAPService_ServiceDesc.Streams[0], V1PAPService_FetchLedgers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LedgerFetchRequest, LedgerResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_FetchLedgersClient = grpc.ServerStreamingClient[LedgerResponse]

func (c *v1PAPServiceClient) ReceivePack(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PackMessage, PackMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V1PAPService_ServiceDesc.Streams[1], V1PAPService_ReceivePack_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PackMessage, PackMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_ReceivePackClient = grpc.BidiStreamingClient[PackMessage, PackMessage]

func (c *v1PAPServiceClient) NOTPStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PackMessage, PackMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V1PAPService_ServiceDesc.Streams[2], V1PAPService_NOTPStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PackMessage, PackMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_NOTPStreamClient = grpc.BidiStreamingClient[PackMessage, PackMessage]

// V1PAPServiceServer is the server API for V1PAPService service.
// All implementations must embed UnimplementedV1PAPServiceServer
// for forward compatibility.
//
// V1PAPService is the service for the Policy Administration Point.
type V1PAPServiceServer interface {
	// Create an ledger.
	CreateLedger(context.Context, *LedgerCreateRequest) (*LedgerResponse, error)
	// Update an ledger.
	UpdateLedger(context.Context, *LedgerUpdateRequest) (*LedgerResponse, error)
	// Delete an ledger.
	DeleteLedger(context.Context, *LedgerDeleteRequest) (*LedgerResponse, error)
	// Fetch ledgers.
	FetchLedgers(*LedgerFetchRequest, grpc.ServerStreamingServer[LedgerResponse]) error
	// ReceivePack receives objects from the client.
	ReceivePack(grpc.BidiStreamingServer[PackMessage, PackMessage]) error
	// NOTPStream handles bidirectional stream using the NOTP protocol.
	NOTPStream(grpc.BidiStreamingServer[PackMessage, PackMessage]) error
	mustEmbedUnimplementedV1PAPServiceServer()
}

// UnimplementedV1PAPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedV1PAPServiceServer struct{}

func (UnimplementedV1PAPServiceServer) CreateLedger(context.Context, *LedgerCreateRequest) (*LedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLedger not implemented")
}
func (UnimplementedV1PAPServiceServer) UpdateLedger(context.Context, *LedgerUpdateRequest) (*LedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLedger not implemented")
}
func (UnimplementedV1PAPServiceServer) DeleteLedger(context.Context, *LedgerDeleteRequest) (*LedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLedger not implemented")
}
func (UnimplementedV1PAPServiceServer) FetchLedgers(*LedgerFetchRequest, grpc.ServerStreamingServer[LedgerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FetchLedgers not implemented")
}
func (UnimplementedV1PAPServiceServer) ReceivePack(grpc.BidiStreamingServer[PackMessage, PackMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePack not implemented")
}
func (UnimplementedV1PAPServiceServer) NOTPStream(grpc.BidiStreamingServer[PackMessage, PackMessage]) error {
	return status.Errorf(codes.Unimplemented, "method NOTPStream not implemented")
}
func (UnimplementedV1PAPServiceServer) mustEmbedUnimplementedV1PAPServiceServer() {}
func (UnimplementedV1PAPServiceServer) testEmbeddedByValue()                      {}

// UnsafeV1PAPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1PAPServiceServer will
// result in compilation errors.
type UnsafeV1PAPServiceServer interface {
	mustEmbedUnimplementedV1PAPServiceServer()
}

func RegisterV1PAPServiceServer(s grpc.ServiceRegistrar, srv V1PAPServiceServer) {
	// If the following call pancis, it indicates UnimplementedV1PAPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&V1PAPService_ServiceDesc, srv)
}

func _V1PAPService_CreateLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedgerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).CreateLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_CreateLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).CreateLedger(ctx, req.(*LedgerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PAPService_UpdateLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedgerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).UpdateLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_UpdateLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).UpdateLedger(ctx, req.(*LedgerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PAPService_DeleteLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedgerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).DeleteLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_DeleteLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).DeleteLedger(ctx, req.(*LedgerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PAPService_FetchLedgers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LedgerFetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1PAPServiceServer).FetchLedgers(m, &grpc.GenericServerStream[LedgerFetchRequest, LedgerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_FetchLedgersServer = grpc.ServerStreamingServer[LedgerResponse]

func _V1PAPService_ReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V1PAPServiceServer).ReceivePack(&grpc.GenericServerStream[PackMessage, PackMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_ReceivePackServer = grpc.BidiStreamingServer[PackMessage, PackMessage]

func _V1PAPService_NOTPStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V1PAPServiceServer).NOTPStream(&grpc.GenericServerStream[PackMessage, PackMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_NOTPStreamServer = grpc.BidiStreamingServer[PackMessage, PackMessage]

// V1PAPService_ServiceDesc is the grpc.ServiceDesc for V1PAPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1PAPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "policyadministrationpoint.V1PAPService",
	HandlerType: (*V1PAPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLedger",
			Handler:    _V1PAPService_CreateLedger_Handler,
		},
		{
			MethodName: "UpdateLedger",
			Handler:    _V1PAPService_UpdateLedger_Handler,
		},
		{
			MethodName: "DeleteLedger",
			Handler:    _V1PAPService_DeleteLedger_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchLedgers",
			Handler:       _V1PAPService_FetchLedgers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceivePack",
			Handler:       _V1PAPService_ReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NOTPStream",
			Handler:       _V1PAPService_NOTPStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/agents/services/pap/endpoints/api/v1/pap.proto",
}
