// Copyright 2024 Nitro Agility S.r.l.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0


syntax="proto3";

import "google/protobuf/timestamp.proto";

package policyadministrationpoint;

option go_package = "github.com/permguard/permguard/internal/hosts/api/pap/v1";

// Ledgers

// Ledger get request.
message LedgerFetchRequest {
	optional int32 Page 	 		= 1;
	optional int32 PageSize	 		= 2;
    int64 ApplicationID 				= 3;
    optional string LedgerID 	= 4;
	optional string Name 			= 5;
}

// Ledger create request.
message LedgerCreateRequest {
    int64 ApplicationID = 1;
	string Name = 2;
}

// Ledger update request.
message LedgerUpdateRequest {
	int64 ApplicationID = 1;
    string LedgerID = 2;
    string Name = 3;
}

// Ledger delete request.
message LedgerDeleteRequest {
	int64 ApplicationID = 1;
	string LedgerID = 2;
}

// Ledger response.
message LedgerResponse {
    string LedgerID = 1;
    int64 ApplicationID = 2;
    google.protobuf.Timestamp CreatedAt = 3;
    google.protobuf.Timestamp UpdatedAt = 4;
    string Name = 5;
	string Ref = 6;
}

// Pack Objects

// Ledger stream request.
message LedgerStreamRequest {
	int64 ApplicationID = 1;
    string LedgerID = 2;
}

// PackMessage is a pack message.
message PackMessage {
  bytes data = 1;
}

// V1PAPService is the service for the Policy Administration Point.
service V1PAPService {
	// Create an ledger.
	rpc CreateLedger(LedgerCreateRequest) returns (LedgerResponse) {}
	// Update an ledger.
	rpc UpdateLedger(LedgerUpdateRequest) returns (LedgerResponse) {}
	// Delete an ledger.
	rpc DeleteLedger(LedgerDeleteRequest) returns (LedgerResponse) {}
	// Fetch ledgers.
	rpc FetchLedgers(LedgerFetchRequest) returns (stream LedgerResponse) {}
	// ReceivePack receives objects from the client.
	rpc ReceivePack(stream PackMessage) returns (stream PackMessage) {}
	// NOTPStream handles bidirectional stream using the NOTP protocol.
	rpc NOTPStream(stream PackMessage) returns (stream PackMessage) {}
}
